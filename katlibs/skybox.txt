--@name katlibs/skyboxlib
--@author katsu
--@client
       
if permissionManager then
    permissionManager.setupPerms({
                                    "hologram.create",
                                    "material.create",
                                    "material.imagecreate",
                                    "material.load",
                                    "mesh",
                                    "render.effects",
                                    "render.fog",
                                    "render.renderscene",
                                })
end

--[bring functions closer to scope from global table so that per frame rendering is cheaper]------------------------

local r_pushViewMatrix = render.pushViewMatrix
local r_popViewMatrix = render.popViewMatrix
local r_pushMatrix = render.pushMatrix
local r_popMatrix = render.popMatrix
    
local r_getEyePos = render.getEyePos
local r_getAngles = render.getAngles
    
local r_selectRenderTarget = render.selectRenderTarget
local r_clear = render.clear
local r_setMaterial = render.setMaterial
local r_draw3DBox = render.draw3DBox
local r_enableDepth = render.enableDepth
local r_setFilterMin = render.setFilterMin
local r_setFilterMag = render.setFilterMag

local r_setFogMode = render.setFogMode
local r_setFogColor = render.setFogColor
local r_setFogDensity = render.setFogDensity
local r_setFogStart = render.setFogStart
local r_setFogEnd = render.setFogEnd

local r_setLightingMode = render.setLightingMode
local r_suppressEngineLighting = render.suppressEngineLighting
local r_setModelLighting = render.setModelLighting

---------------------------------------------------------------------------------------------------------------------

local GR_X,GR_Y = render.getGameResolution()
local screenRatio = GR_Y/GR_X
local skyboxSize = 500000

RTSkybox = class("katlib_RTSkybox")
local rtitr = 0

function RTSkybox:initialize(sbmats)
    local newrtkey = chip():entIndex().."RTsb"..rtitr
    render.createRenderTarget(newrtkey)
    self.rtmatkey = newrtkey
    
    local targetMat = material.create("Refract_DX90")
    targetMat:setTextureRenderTarget("$basetexture", newrtkey)
    targetMat:setInt("$flags",2048+16384)
    targetMat:setInt("$bluramount",0)
    targetMat:setVector("$refracttint",Vector(1,1,1))
    self.targetMat = targetMat

    self.draw = true
    self.sbMat_Front = sbmats["Front"]
    self.sbMat_Back = sbmats["Back"]
    self.sbMat_Right = sbmats["Right"]
    self.sbMat_Left = sbmats["Left"]
    self.sbMat_Top = sbmats["Top"]
    self.sbMat_Bot = sbmats["Bot"]
    self.sbMatrix = Matrix()
    
    self.drawModel = false
    self.renderOrigin = chip():getPos()
    self.models = nil
    self.modelMaterials = nil
    self.modelMatrix = Matrix()

    self.drawFog = false
    self.fogDensity = 0.5
    self.fogColor = Vector(150)
    self.fogStart = 5000
    self.fogEnd = 10000
    
    self.drawLighting = false
    self.lightingTab = nil
    
    hook.add("renderscene",newrtkey,function(viewOrigin,viewAng,fov) 
        r_selectRenderTarget(newrtkey)
        r_clear(Color(0,0,0,255),true)
        if self.draw then
            r_enableDepth(true)
            -- [pass 1 (skybox)] ----------------------------------
            r_pushMatrix(self.sbMatrix,true)
            r_pushViewMatrix({
                            type="3D", 
                            w=1024,
                            h=1024,
                            origin = origin,
                            angles = viewang,
                            znear = 0.1,
                            zfar = 99999999,
                            }) 
            
            r_setLightingMode(2)
            r_setFilterMin(1)
            r_setFilterMag(1)
               
            r_setMaterial(self.sbMat_Bot)
            r_draw3DBox(Vector(0,0,-skyboxSize),Angle(0,0,0), Vector(-skyboxSize,skyboxSize,0), Vector(skyboxSize,-skyboxSize,1)) //bottom
                      
            r_setMaterial(self.sbMat_Top)
            r_draw3DBox(Vector(0,0,skyboxSize),Angle(0,0,0), Vector(-skyboxSize,-skyboxSize,0), Vector(skyboxSize,skyboxSize,1)) //top
            
            r_setMaterial(self.sbMat_Right)
            r_draw3DBox(Vector(0,skyboxSize,0),Angle(0,0,0), Vector(-skyboxSize,0,skyboxSize), Vector(skyboxSize,0.01,-skyboxSize)) //front   
                   
            r_setMaterial(self.sbMat_Left)
            r_draw3DBox(Vector(0,-skyboxSize,0),Angle(0,0,0), Vector(skyboxSize,0,skyboxSize), Vector(-skyboxSize,0.01,-skyboxSize)) //back 
            
            r_setMaterial(self.sbMat_Front)
            r_draw3DBox(Vector(skyboxSize,0,0),Angle(0,0,0), Vector(0,skyboxSize,skyboxSize), Vector(0.01,-skyboxSize,-skyboxSize)) //right  
                    
            r_setMaterial(self.sbMat_Back)
            r_draw3DBox(Vector(-skyboxSize,0,0),Angle(0,0,0), Vector(0,-skyboxSize,skyboxSize), Vector(0.01,skyboxSize,-skyboxSize)) //left
            
            r_popMatrix()            
            r_popViewMatrix()
            
            -- [pass 2 (model - optional)] ----------------------------------        
            if self.drawModel then //and mesh.trianglesLeftRender() >= 45000 then
                r_pushViewMatrix({
                                type="3D", 
                                w=1024,
                                h=1024,
                                origin = viewOrigin - self.renderOrigin,
                                angles = viewAng,
                                znear = 0.1,
                                zfar = 99999999,
                                })

                r_setFilterMin(3)
                r_setFilterMag(3)
    
                r_pushMatrix(self.modelMatrix,true)
                
                if self.drawFog then
                    r_setLightingMode(0)
                    r_setFogMode(MATERIAL_FOG.LINEAR)
                    r_setFogDensity(self.fogDensity)
                    r_setFogColor(self.fogColor)
                    r_setFogStart(self.fogStart)
                    r_setFogEnd(self.fogEnd)
                end
                
                if self.drawLighting then
                    r_setLightingMode(0)
                    r_suppressEngineLighting(true)
                    for k,v in pairs(self.lightingTab) do
                        r_setModelLighting(k,v[1],v[2],v[3])
                    end
                end
                
                for i=1,#self.models do
                    r_setMaterial(self.modelMaterials[i])
                    self.models[i]:draw()
                end
                
                r_popMatrix()
                r_popViewMatrix()
            end
        end
    end)
end

function RTSkybox:getSBMat()
    return "!"..self.targetMat:getName()
end

function RTSkybox:setDraw(bool)
    self.draw = bool
end

function RTSkybox:setSBMatrix(matrix)
    self.sbMatrix = matrix
end
-------------------------------------------------------------------------------------------------------

function RTSkybox:setRenderOrigin(vector) --where the model origin is in the gmod map
    self.renderOrigin = vector
end

function RTSkybox:setModelData(meshTab,materialTab)
    self.drawModel = true
    self.models = table.clearKeys(meshTab)
    self.modelMaterials = materialTab
end

function RTSkybox:setModelMatrix(matrix)
    self.modelMatrix = matrix
end

function RTSkybox:clearModel()
    self.drawModel = false
    self.models = nil
    self.modelMaterials = nil
    self.modelMatrix = Matrix()
end

-------------------------------------------------------------------------------------------------------

function RTSkybox:setFog(fogDensity,fogColor,fogStart,fogEnd)
    self.drawFog = true
    self.fogDensity = fogDensity
    self.fogColor = fogColor
    self.fogStart = fogStart
    self.fogEnd = fogEnd
end

function RTSkybox:setFogDensity(fogDensity)
    self.fogDensity = fogDensity
end

function RTSkybox:setFogColor(fogColor)
    self.fogColor = fogColor
end

function RTSkybox:setFogStart(fogStart)
    self.fogStart = fogStart
end

function RTSkybox:setFogEnd(fogEnd)
    self.fogEnd = fogEnd
end

function RTSkybox:clearFog()
    self.drawFog = false
    self.fogDensity = 0.5
    self.fogColor = Vector(150)
    self.fogStart = 5000
    self.fogEnd = 10000
end

-------------------------------------------------------------------------------------------------------

function RTSkybox:addLighting(direction,color,intensity)
    local r = color.r/255*intensity
    local g = color.g/255*intensity
    local b = color.b/255*intensity
    
    self.drawLighting = true
    if self.lightingTab == nil then
        self.lightingTab = {}
    end
    
    self.lightingTab[direction] = {r,g,b}
end

function RTSkybox:removeLighting(direction)
    if self.lightingTab ~= nil then
        self.lightingTab[direction] = nil
    end
end

function RTSkybox:clearLighting(direction)
    self.drawLighting = false
    self.lightingTab = nil
end
